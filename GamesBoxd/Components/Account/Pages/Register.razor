@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GamesBoxd.Components.Layout
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GamesBoxd.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Criar Conta</PageTitle>

<section class="flex flex-row justify-around items-center h-screen w-full">
    
    <div class="hidden lg:flex flex-col w-1/2 justify-center items-center bg-gray-950 h-full">
        <img src="/images/icons/GamesBoxd.svg" alt="Logo" class="w-72 h-60" />
        <p class="text-textColor text-xl sm:text-2xl md:text-3xl lg:text-4xl
        font-bold mb-4 text-pretty">Comece a avaliar seus jogos agora!</p>
    </div>
    
    <div class="w-1/2 flex justify-center items-center p-8">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register"
        class="rounded-lg p-4 bg-menuBackground h-auto min-w-[30rem] py-10 px-10">

        <h1 class="text-textColor text-xl sm:text-2xl md:text-3xl lg:text-4xl
        font-bold mb-4 text-center">Criar conta</h1>

            <DataAnnotationsValidator/>

            <ValidationSummary class="text-danger" role="alert"/>

            <div class="flex flex-col gap-2">
                <h3 class="text-textColor text-base sm:text-lg md:text-xl lg:text-2xl font-bold mb-1">Email</h3>
                <InputText @bind-Value="Input.Email" class="w-full h-14 text-textColor text-sm sm:text-base md:text-lg lg:text-xl
                border-[0.1px] border-gray-600 px-2 py-2" autocomplete="username" aria-required="true" placeholder="exemplo@gmail.com"/>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>

                <h3 class="text-textColor text-base sm:text-lg md:text-xl lg:text-2xl font-bold mb-1">Senha</h3>
                <InputText type="password" @bind-Value="Input.Password" class="w-full h-14 text-textColor text-sm sm:text-base md:text-lg lg:text-xl
                border-[0.1px] border-gray-600 px-2 py-2" autocomplete="new-password" aria-required="true" placeholder="Senha"/>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>

                <h3 class="text-textColor text-base sm:text-lg md:text-xl lg:text-2xl font-bold mb-1">Confirmar Senha</h3>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="w-full h-14 text-textColor text-sm sm:text-base md:text-lg lg:text-xl
                border-[0.1px] border-gray-600 px-2 py-2" autocomplete="new-password" aria-required="true" placeholder="Confirmar senha"/>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>

            <div class="mt-6">
                <button type="submit" class="cursor-pointer h-auto w-full bg-highlight rounded-lg font-bold text-textColor
                     text-lg sm:text-xl md:text-2xl lg:text-3xl px-4 sm:px-2 py-4 sm:py-2">Criar conta</button>
            </div>

        </EditForm>
    </div>

</section>

<Footer />




@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
