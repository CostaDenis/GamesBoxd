@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using GamesBoxd.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GamesBoxd.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Entrar</PageTitle>


<section class="flex flex-row justify-around items-center h-screen w-full">

    <div class="hidden lg:flex flex-col w-1/2 justify-center items-center bg-gray-950 h-full">
        <img src="/images/icons/GamesBoxd.svg" alt="Logo" class="w-72 h-60" />
        <p class="text-textColor text-xl sm:text-2xl md:text-3xl lg:text-4xl
        font-bold mb-4 text-pretty">Faça login para avaliar seus jogos!</p>
        </p>
    </div>



    <div class="w-1/2 flex justify-center items-center p-8">

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login"
            class="border-secondary rounded-lg p-4 bg-menuBackground h-auto min-w-[30rem] py-10 px-10">

            <h1 class="text-textColor text-xl sm:text-2xl md:text-3xl lg:text-4xl
        font-bold mb-4 text-center">Login</h1>

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="flex flex-col gap-2">

                <div>
                    <h3 class="text-textColor text-base sm:text-lg md:text-xl lg:text-2xl font-bold mb-1">Email</h3>
                    <InputText @bind-Value="Input.Email" class="w-full h-14 text-textColor text-sm sm:text-base md:text-lg lg:text-xl
                border-[0.1px] border-gray-600 px-2 py-2" autocomplete="username" aria-required="true"
                        placeholder="exemplo@gmail.com" />

                    <ValidationMessage For="() => Input.Email" class="text-textColor" />
                </div>

                <div>
                    <h3 class="text-textColor text-base sm:text-lg md:text-xl lg:text-2xl font-bold mb-1">Senha</h3>
                    <InputText type="password" @bind-Value="Input.Password" class="w-full h-14 text-textColor text-sm sm:text-base md:text-lg lg:text-xl
                border-[0.1px] border-gray-600 px-2 py-2" autocomplete="current-password" aria-required="true"
                        placeholder="senha" />
                    <ValidationMessage For="() => Input.Password" class="text-textColor" />
                </div>


            </div>

            <div class="text-textColor
                    text-sm sm:text-base mt-2">
                <InputCheckbox @bind-Value="Input.RememberMe" class="" />
                Continuar conectado
            </div>

            <div class="flex flex-col gap-2 mt-2">

                <p class="text-textColor
                    text-sm sm:text-base text-center">
                    Esqueceu a senha? Clique <a href="Account/ForgotPassword">aqui</a>
                </p>

                <div>
                    <button type="submit" class="cursor-pointer h-auto w-full bg-highlight rounded-lg font-bold text-textColor
                     text-lg sm:text-xl md:text-2xl lg:text-3xl px-4 sm:px-2 py-4 sm:py-2">Entrar</button>
                </div>

                <p class="text-textColor
                    text-sm sm:text-base text-center">
                    Não tem conta?<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> 
                                     { ["ReturnUrl"] = ReturnUrl }))"> Cadastre-se</a>
                </p>

            </div>

        </EditForm>

    </div>

</section>

<Footer />



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
